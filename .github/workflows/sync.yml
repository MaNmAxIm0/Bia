# .github/workflows/sync.yml

name: Processar e Sincronizar Portfólio

on:
  push:
    branches:
      - main # Executa em cada push para o branch principal
  workflow_dispatch: # Permite a execução manual a partir da interface do GitHub

jobs:
  sync-and-process:
    runs-on: ubuntu-latest
    
    # --- CORREÇÃO: Permissões para o git push ---
    # Concede ao workflow a permissão para escrever no repositório.
    permissions:
      contents: write

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache para dependências Pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # --- CORREÇÃO: Uso de uma ação dedicada para o cache de Apt ---
      # Esta ação simplifica o cache de pacotes de sistema e lida com permissões.
      - name: Instalar e fazer cache de dependências Apt
        uses: awalsh128/cache-apt-pkgs-action@v1.5.0
        with:
          packages: ffmpeg libimage-exiftool-perl
          version: 1.0 # Mude esta versão para invalidar o cache se os pacotes mudarem

      - name: Instalar dependências Python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Instalar e Configurar Rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          # Usa 'cat << EOF' para escrever o conteúdo do segredo literalmente,
          # preservando todos os caracteres especiais.
          cat << EOF > ~/.config/rclone/rclone.conf
          ${{ secrets.RCLONE_CONF }}
          EOF
          
      - name: Executar Pipeline Principal
        # Este passo executa o seu script orquestrador principal.
        run: python3 main.py

      - name: Configurar Git para o bot
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Fazer commit e push dos ficheiros de manifesto
        run: |
          # --- CORREÇÃO: Lógica de commit e push robusta ---
          # Adiciona os ficheiros gerados. Se não existirem, o comando não falha.
          git add data.json r2_file_manifest.txt || echo "Ficheiros de manifesto não encontrados para adicionar."
          
          # Verifica se existem alterações preparadas para commit
          if ! git diff --staged --quiet; then
            git commit -m "CI: Atualiza data.json e manifesto R2"
            git push
          else
            echo "Nenhuma alteração nos ficheiros de manifesto para fazer commit."
          fi
