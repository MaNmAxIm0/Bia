name: Sincronizar Media, Gerar Manifesto, Thumbs e Dados

on:
  workflow_dispatch: # Permite execução manual
  schedule:
    # ATUALIZADO: Executa todos os dias às 19:00 e 20:00 UTC.
    # Isto cobre as 20:00 em Lisboa, tanto no horário de verão (UTC+1) como no de inverno (UTC+0).
    - cron: '0 19,20 * * *'

permissions:
  contents: write

jobs:
  sync-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Instalar ferramentas e dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg jq
          pip3 install Pillow
          curl https://rclone.org/install.sh | sudo bash

      - name: Configurar rclone
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        run: |
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONF" > ~/.config/rclone/rclone.conf

      - name: Sincronizar Drive -> R2 (Apenas ficheiros novos ou alterados)
        run: |
          echo "--- Sincronizando Drive -> R2 ---"
          rclone sync "Drive:Portfólio Bia" "R2:bia-portfolio-assets" --update --use-server-modtime --exclude "desktop.ini" -v

      - name: Gerar Thumbnails Apenas para Vídeos Novos
        run: |
          echo "--- Verificando e gerando thumbnails para vídeos novos ---"
          mkdir -p temp_thumbs_download temp_thumbs_generate
          rclone lsf "R2:bia-portfolio-assets/Vídeos" --files-only --exclude "wm_*" > video_list.txt
          rclone lsf "R2:bia-portfolio-assets/Thumbnails" --files-only > thumb_list.txt
          
          # Compara e processa apenas os vídeos que não têm thumbnail
          grep -vFf <(sed 's/\.jpg$//' thumb_list.txt) video_list.txt | while IFS= read -r video_file; do
            [ -z "$video_file" ] && continue
            echo "-> Thumbnail necessária para: ${video_file}"
            local_video_path="temp_thumbs_download/${video_file}"
            if rclone copyto "R2:bia-portfolio-assets/Vídeos/${video_file}" "${local_video_path}"; then
              thumb_name="${video_file%.*}.jpg"
              generated_thumb_path="temp_thumbs_generate/${thumb_name}"
              ffmpeg -i "${local_video_path}" -ss 00:00:01.00 -vframes 1 "${generated_thumb_path}" > /dev/null 2>&1
              rm "${local_video_path}"
            else
              echo "AVISO: Falha ao descarregar o vídeo '${video_file}'. A ignorar."
            fi
          done
          
          if [ -n "$(ls -A temp_thumbs_generate)" ]; then
            echo "--- A fazer upload de novas thumbnails ---"
            rclone copy temp_thumbs_generate "R2:bia-portfolio-assets/Thumbnails" -P
          else
            echo "--- Nenhuma thumbnail nova para fazer upload ---"
          fi

      - name: Gerar data.json e aplicar Marcas de Água
        run: |
          echo "--- Executando script Python para processar media ---"
          mkdir -p scripts/
          curl -L -o scripts/Montserrat.ttf "https://github.com/google/fonts/raw/main/ofl/montserrat/Montserrat%5Bwght%5D.ttf"
          python3 scripts/process_files.py

      # NOVA ETAPA: Gerar o manifesto de ficheiros
      - name: Gerar Manifesto de Ficheiros do R2
        id: generate_manifest
        run: |
          echo "--- Gerando a lista de todos os ficheiros no R2 ---"
          MANIFEST_FILE="r2_file_manifest.txt"
          # Gera um cabeçalho com a data e hora de Lisboa
          echo "Manifesto de Ficheiros do Bucket 'bia-portfolio-assets'" > $MANIFEST_FILE
          echo "Gerado em: $(TZ='Europe/Lisbon' date)" >> $MANIFEST_FILE
          echo "----------------------------------------------------" >> $MANIFEST_FILE
          # Usa rclone lsl para obter detalhes e formata com jq
          rclone lsl --json "R2:bia-portfolio-assets" --recursive | \
          jq -r '.[] | "\(.ModTime | fromdate | strflocaltime("%Y-%m-%d %H:%M:%S %Z")) \t \(.Size | tostring | rpad(10)) \(.Path)"' | \
          sort >> $MANIFEST_FILE
          echo "Manifesto gerado em ${MANIFEST_FILE}"

      # ETAPA ATUALIZADA: Fazer commit dos ficheiros gerados
      - name: Fazer commit e push dos ficheiros gerados
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add data.json r2_file_manifest.txt # Adiciona o novo ficheiro
          
          if ! git diff --quiet --exit-code --cached; then
            git commit -m "Atualiza data.json e manifesto [skip ci]"
            git pull --rebase
            git push
          else
            echo "Nenhuma alteração nos ficheiros para fazer commit."
          fi